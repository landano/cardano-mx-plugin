// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package cardanowallet.actions;

import com.bloxbean.cardano.client.account.Account;
import com.bloxbean.cardano.client.api.model.Result;
import com.bloxbean.cardano.client.common.model.Networks;
import com.bloxbean.cardano.client.function.Output;
import com.bloxbean.cardano.client.function.TxBuilder;
import com.bloxbean.cardano.client.function.TxBuilderContext;
import com.bloxbean.cardano.client.backend.api.DefaultProtocolParamsSupplier;
import com.bloxbean.cardano.client.backend.api.DefaultUtxoSupplier;
import com.bloxbean.cardano.client.backend.blockfrost.common.Constants;
import com.bloxbean.cardano.client.backend.blockfrost.service.BFBackendService;
import com.bloxbean.cardano.client.cip.cip20.MessageMetadata;
import com.bloxbean.cardano.client.function.helper.AuxDataProviders;
import com.bloxbean.cardano.client.function.helper.BalanceTxBuilders;
import com.bloxbean.cardano.client.function.helper.InputBuilders;
import com.bloxbean.cardano.client.function.helper.SignerProviders;
import com.bloxbean.cardano.client.transaction.spec.Transaction;
import static com.bloxbean.cardano.client.common.CardanoConstants.LOVELACE;
import static com.bloxbean.cardano.client.common.ADAConversionUtil.adaToLovelace;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

public class JA_Cardano_SimpleTransfer extends CustomJavaAction<java.lang.String>
{
	private java.lang.String senderMnemonic;

	public JA_Cardano_SimpleTransfer(IContext context, java.lang.String senderMnemonic)
	{
		super(context);
		this.senderMnemonic = senderMnemonic;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
        // Define expected Outputs
		Account senderAccount = new Account(Networks.testnet(), this.senderMnemonic);
		String senderAddress = senderAccount.baseAddress();
		
		String receiverAddress1 = "addr_test1vplmgm9wresn92hf250zysd8zzdn8jyv7mmxe8lk3zjletqvh2ak2";

		String bfProjectId = "preprodkNJSdhOtgW6cpPNyA0scayVdhWjsXGaZ";
		BFBackendService backendService =
		        new BFBackendService(Constants.BLOCKFROST_PREPROD_URL, bfProjectId);
		
		Output output1 = Output.builder()
                .address(receiverAddress1)
                .assetName(LOVELACE)
                .qty(adaToLovelace(10))
                .build();

		MessageMetadata metadata = MessageMetadata.create()
                .add("First Mendix transfer transaction");
		
		TxBuilder txBuilder = output1.outputBuilder()
                .buildInputs(InputBuilders.createFromSender(senderAddress, senderAddress))
                .andThen(AuxDataProviders.metadataProvider(metadata))
                .andThen(BalanceTxBuilders.balanceTx(senderAddress, 1));
		
		DefaultUtxoSupplier utxoSupplier = new DefaultUtxoSupplier(backendService.getUtxoService());
		DefaultProtocolParamsSupplier protocolParamsSupplier = new DefaultProtocolParamsSupplier(backendService.getEpochService());

		Transaction signedTransaction = TxBuilderContext.init(utxoSupplier, protocolParamsSupplier)
		                                    .buildAndSign(txBuilder, SignerProviders.signerFrom(senderAccount));
		
		Result<String> result = backendService.getTransactionService().submitTransaction(signedTransaction.serialize());
		
		return result.getValue();	
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_Cardano_SimpleTransfer";
	}

	// BEGIN EXTRA CODE
	
	// END EXTRA CODE
}

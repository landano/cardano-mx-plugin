// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package cardanowallet.actions;

import com.bloxbean.cardano.client.account.Account;
import com.bloxbean.cardano.client.common.model.Network;
import com.bloxbean.cardano.client.common.model.Networks;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.bloxbean.cardano.client.backend.blockfrost.service.*;
import com.mendix.systemwideinterfaces.core.*;

public class JA_CreateAccountFromMnemonic extends CustomJavaAction<IMendixObject>
{
	private java.lang.String mnemonic;
	private cardanowallet.proxies.Enum_CardanoNetwork CardanoNetworkEnum;

	public JA_CreateAccountFromMnemonic(IContext context, java.lang.String mnemonic, java.lang.String CardanoNetworkEnum)
	{
		super(context);
		this.mnemonic = mnemonic;
		this.CardanoNetworkEnum = CardanoNetworkEnum == null ? null : cardanowallet.proxies.Enum_CardanoNetwork.valueOf(CardanoNetworkEnum);
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		Network selectedNetwork;
		String networkString = this.CardanoNetworkEnum.name();
		if(networkString.equalsIgnoreCase("preprod")) {
			selectedNetwork = Networks.preprod();
		} else if(networkString.equalsIgnoreCase("testnet")) {
			selectedNetwork = Networks.testnet();
		} else if(networkString.equalsIgnoreCase("preview")) {
			selectedNetwork = Networks.preview();
		} else {
			selectedNetwork = Networks.mainnet();
		}
		// create object
		IMendixObject newObject = Core.instantiate(getContext(), "CardanoWallet.WalletAPI");
		cardanowallet.proxies.WalletAPI wallet = cardanowallet.proxies.WalletAPI.initialize(getContext(),newObject);

		Account newAccount = new Account(selectedNetwork, this.mnemonic);
		wallet.setBaseAddress(newAccount.baseAddress());
		wallet.setStakeAddress(newAccount.stakeAddress());
		wallet.setBaseAddress(networkString);

		/*
		 * 
		 *      // Initialize Blockfrost Backend Service
        BaseBackendService backendService = new BlockfrostBackendService(API_KEY);

        // Get the Address Service
        AddressService addressService = backendService.getAddressService();

        try {
            // Get the UTXOs for the address
            List<Utxo> utxos = addressService.getUtxos(ADDRESS);

            // Calculate the total balance
            long totalBalance = 0;
            for (Utxo utxo : utxos) {
                List<Amount> amounts = utxo.getAmount();
                for (Amount amount : amounts) {
                    if (amount.getUnit().equalsIgnoreCase("lovelace")) {
                        totalBalance += Long.parseLong(amount.getQuantity());
                    }
                }
            }

            System.out.println("Balance for address " + ADDRESS + ": " + totalBalance + " lovelace");
        } catch (Exception e) {
            e.printStackTrace();
        }
		 * 
		 */

		return wallet.getMendixObject();

		// throw new com.mendix.systemwideinterfaces.MendixRuntimeException("Java action was not implemented");
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "JA_CreateAccountFromMnemonic";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}

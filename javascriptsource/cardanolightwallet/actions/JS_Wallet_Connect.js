// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
// END EXTRA CODE

/**
 * @param {MxObject} wallet
 * @returns {Promise.<boolean>}
 */
export async function JS_Wallet_Connect(wallet) {
	// BEGIN USER CODE
    const walletIdentifier = wallet.get('WalletID');
    if (window.cardano && window.cardano[walletIdentifier]) {
        try {
            const cardanoWallet = await window.cardano[walletIdentifier].enable();
            const addresses = await cardanoWallet.getUsedAddresses();
			console.info(addresses);

			if (addresses.length === 0) {
                // If no used addresses, get unused addresses
                addresses = await cardanoWallet.getUnusedAddresses();
            }

            const addressEntity = "CardanoLightWallet.Address"; // The Address entity name

            for (const address of addresses) {
				console.info(address);			
                await new Promise((resolve, reject) => {
                    mx.data.create({
                        entity: addressEntity,
                        callback: (mxObject) => {
                            mxObject.set("Address", address);
                            mxObject.set("Address_Wallet", wallet.getGuid()); // Assuming you have a reference set up
                            resolve(mxObject);
                        },
                        error: (error) => {
                            console.error('Failed to create address object:', error);
                            reject(error);
                        }
                    });
                });
            }

            return true; // Indicate success
        } catch (error) {
            console.error('Failed to connect wallet:', error);
            throw new Error('Wallet connection failed');
        }
    } else {
        throw new Error('Wallet not found');
    }
	// END USER CODE
}
